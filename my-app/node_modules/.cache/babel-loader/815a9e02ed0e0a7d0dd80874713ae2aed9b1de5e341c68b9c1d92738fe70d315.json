{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PratibhaNamdeo\\\\OneDrive - BITTWOBYTE TECHNOLOGY PRIVATE LIMITED\\\\React\\\\my-app\\\\src\\\\Component\\\\Header.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Header(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Parents\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n// import React, { useState } from 'react';\n\n// export default function Header({ showSearch }) {\n//   const [searchText, setSearchText] = useState('');\n\n//   const handleSearchChange = (e) => {\n//     setSearchText(e.target.value);\n//     // You can pass the searchText to a parent component or handle it here\n//     // For example: props.handleSearch(searchText);\n//   };\n\n//   // Conditionally render the search bar based on the 'showSearch' prop\n//   if (showSearch) {\n//     return (\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search...\"\n//           value={searchText}\n//           onChange={handleSearchChange}\n//         />\n//         Parents\n//       </div>\n//     );\n//   } else {\n//     // If 'showSearch' is false, return just the \"Parents\" text\n//     return (\n//       <div>\n//         Parents\n//       </div>\n//     );\n//   }\n// }\n_c = Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Header","props","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PratibhaNamdeo/OneDrive - BITTWOBYTE TECHNOLOGY PRIVATE LIMITED/React/my-app/src/Component/Header.js"],"sourcesContent":["import React from 'react';\r\n\r\nexport   default function  Header(props) {\r\n    return(\r\n    <div>\r\n     Parents \r\n   </div>\r\n    );\r\n}\r\n// import React, { useState } from 'react';\r\n\r\n// export default function Header({ showSearch }) {\r\n//   const [searchText, setSearchText] = useState('');\r\n\r\n//   const handleSearchChange = (e) => {\r\n//     setSearchText(e.target.value);\r\n//     // You can pass the searchText to a parent component or handle it here\r\n//     // For example: props.handleSearch(searchText);\r\n//   };\r\n\r\n//   // Conditionally render the search bar based on the 'showSearch' prop\r\n//   if (showSearch) {\r\n//     return (\r\n//       <div>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Search...\"\r\n//           value={searchText}\r\n//           onChange={handleSearchChange}\r\n//         />\r\n//         Parents\r\n//       </div>\r\n//     );\r\n//   } else {\r\n//     // If 'showSearch' is false, return just the \"Parents\" text\r\n//     return (\r\n//       <div>\r\n//         Parents\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAiB,SAAUC,MAAMA,CAACC,KAAK,EAAE;EACrC,oBACAF,OAAA;IAAAG,QAAA,EAAK;EAEN;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GAvC2BP,MAAM;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}